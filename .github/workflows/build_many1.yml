name: BuildAndTest

on:
  workflow_dispatch:

env:
  QT_VERSION: 5.15.2

jobs:
  build_manylinux2014_wheel:
    name: Build manylinux2014 Python 3.10 Wheel
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux2014_x86_64
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Setup env variables
      id: envs
      shell: bash
      run: |
        echo "arch=x86_64" >> $GITHUB_OUTPUT
        echo "build_options=--nightly --ccache" >> $GITHUB_OUTPUT
        echo "deploy_options=" >> $GITHUB_OUTPUT
    
    - name: Install system dependencies
      run: |
        yum install -y epel-release
        yum install -y ccache gcc-c++ make cmake git
        yum install -y mesa-libGL-devel
        yum install -y qt5-qtbase-devel
    
    - name: Setup Python 3.10
      run: |
        # Use Python 3.10 from manylinux2014
        export PATH="/opt/python/cp310-cp310/bin:$PATH"
        /opt/python/cp310-cp310/bin/pip install -U pip
    
    - name: Cache external libraries sources
      id: cache-ext-libs
      uses: actions/cache@v2
      with:
        path: src/meshlab/src/external/downloads/*
        key: manylinux2014-x86_64-external-libraries
    
    - name: Patch E57Format header
      run: |
        # Create patches directory if it doesn't exist
        mkdir -p patches
        
        # Create patch file for E57Format.h
        cat > patches/e57format.patch << 'EOF'
        --- E57Format.h.orig
        +++ E57Format.h
        @@ -29,6 +29,7 @@
         #include <exception>
         #include <iostream>
         #include <string>
        +#include <cstdint>
         #include <vector>
         
         #ifdef E57_REFIMPL
        EOF
        
        # Find the E57Format.h file in the repository and apply the patch
        find src -name "E57Format.h" -exec sh -c 'cp {} {}.orig && patch {} < patches/e57format.patch' \;
    
    - name: Ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: manylinux2014-x86_64-${{ github.ref }}
    
    - name: Build PyMeshLab
      run: |
        export PATH="/opt/python/cp310-cp310/bin:$PATH"
        # Create symlinks to Python 3.10 for build scripts to find
        ln -sf /opt/python/cp310-cp310/bin/python /usr/local/bin/python3.10
        ln -sf /opt/python/cp310-cp310/bin/pip /usr/local/bin/pip3.10
        # Ensure scripts can find Python
        export PYTHONPATH=/opt/python/cp310-cp310/lib/python3.10/site-packages:$PYTHONPATH
        sh scripts/Linux/1_build.sh ${{ steps.envs.outputs.build_options }}
    
    - name: Deploy PyMeshLab
      run: |
        export PATH="/opt/python/cp310-cp310/bin:$PATH"
        sh scripts/Linux/2_deploy.sh ${{ steps.envs.outputs.deploy_options }}
    
    - name: Build manylinux2014 Wheel
      shell: bash
      run: |
        export PATH="/opt/python/cp310-cp310/bin:$PATH"
        
        # Create version file
        VER=$(date +%Y.%m.%d)
        echo "${VER}.dev0" | tr -d '\n'> PYML_VERSION
        
        # Build wheel
        /opt/python/cp310-cp310/bin/pip install wheel
        /opt/python/cp310-cp310/bin/pip wheel . -w wheels/
        
        # Use auditwheel to make the wheel manylinux2014 compatible
        /opt/python/cp310-cp310/bin/pip install auditwheel
        /opt/python/cp310-cp310/bin/auditwheel repair wheels/pymeshlab*.whl -w manylinux_wheels/
    
    - name: Upload manylinux2014_x86_64_python3.10 wheel
      uses: actions/upload-artifact@v4
      with:
        name: pymeshlab_whl_manylinux2014_x86_64_python3.10
        path: manylinux_wheels/pymeshlab*.whl

  test_manylinux_wheel:
    name: Test manylinux2014 Wheel
    runs-on: ubuntu-latest
    needs: build_manylinux2014_wheel
    container: quay.io/pypa/manylinux2014_x86_64
    steps:
    - name: Download pymeshlab_whl_manylinux2014_x86_64_python3.10
      uses: actions/download-artifact@v4
      with:
        name: pymeshlab_whl_manylinux2014_x86_64_python3.10
        path: .
    
    - name: Install wheel and test dependencies
      shell: bash
      run: |
        # Set up Python 3.10
        export PATH="/opt/python/cp310-cp310/bin:$PATH"
        
        # Install dependencies & wheel
        /opt/python/cp310-cp310/bin/pip install pytest numpy
        /opt/python/cp310-cp310/bin/pip install pymeshlab*.whl
        
        # Install required system libraries
        yum install -y mesa-libGL
    
    - name: Run tests
      run: |
        export PATH="/opt/python/cp310-cp310/bin:$PATH"
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/python/cp310-cp310/lib
        /opt/python/cp310-cp310/bin/pytest --pyargs pymeshlab -m "not glcontext"
